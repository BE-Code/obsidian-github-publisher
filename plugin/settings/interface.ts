import { TFile } from "obsidian";
import { settings, subSettings } from "../i18n";

/**
 * @interface GitHubPublisherSettings
 * @description The settings for the GitHub Publisher plugin
 * @property {string} GhToken - The GitHub token
 * @property {string} githubName - The GitHub username
 * @property {string} githubRepo - The GitHub repo
 * @property {string} githubBranch - The GitHub branch
 * @property {string} shareKey - The share key for the plugin to work
 * @property {string[]} excludedFolder - The folder where the plugin can't publish
 * @property {boolean} fileMenu If the file menu should be displayed
 * @property {boolean} editorMenu If the editor menu should be displayed
 * @property {string} downloadedFolder folder settings (see FolderSettings)
 * @property {string} yamlFolderKey the category key in the frontmatter
 * @property {string} folderDefaultName the default folder
 * @property {string} rootFolder the root folder of the repo
 * @property {string} workflowName the name of the github actions to run
 * @property {boolean} embedImage If the plugin should send the embedded images
 * @property {string} defaultImageFolder the default folder for the embedded images
 * @property {boolean} autoCleanUp If the plugin should delete the files that are not in the vault
 * @property {string[]} autoCleanUpExcluded File excluded from the auto clean up
 * @property {boolean} folderNote If folderNote must be renamed to index.md
 * @property {boolean} convertWikiLinks If the plugin should convert the wiki links to markdown links
 * @property {boolean} convertForGithub Convert the internal links to relative links based on repo path
 * @property {string} subFolder remove the subfolder from the path
 * @property {boolean} embedNotes If the plugin should also send the note embedded in a file
 * @property {boolean} copyLink Allow to create a link passed to the clipboard
 * @property {string} mainLink the main link to the repo
 * @property {string} linkRemover Remove part of the link
 * @property {string} hardBreak If the plugin should convert the normal line break to hard break
 * @property {boolean} logNotice If the plugin must send in a notice the log
 * @property {boolean} convertDataview If the plugin should convert the dataview queries to normal markdown
 * @property {boolean} useFrontmatterTitle If the plugin should use the frontmatter title instead of the file name
 * @property {TextCleaner[]} censorText censor text in the file using regex
 * @property {boolean} inlineTags Send the inlines tags into the frontmatter
 * @property {string[]} dataviewFields Fields to send to the frontmatter as tags
 * @property {string} frontmatterTitleKey The key to use for the frontmatter title
 * @property {string[]} excludeDataviewValue never add this value as tags
 * @property {string[]} metadataFileFields Field linked to note to send along the other files
 * @property {boolean} shareExternalModified share file when modified externally
 * @property {boolean} automaticallyMergePR remove the automatic merge of the PR
 * @property {string} metadataExtractorPath the path where to put the json generated by metadata extractor
 */
export interface GitHubPublisherSettings {
	githubRepo: string;
	githubName: string;
	GhToken: string;
	githubBranch: string;
	shareKey: string;
	excludedFolder: string[];
	fileMenu: boolean;
	editorMenu: boolean;
	downloadedFolder: string;
	folderDefaultName: string;
	yamlFolderKey: string;
	rootFolder: string;
	workflowName: string;
	embedImage: boolean;
	defaultImageFolder: string;
	autoCleanUp: boolean;
	autoCleanUpExcluded: string[];
	folderNote: boolean;
	convertWikiLinks: boolean;
	convertForGithub: boolean;
	subFolder: string;
	embedNotes: boolean;
	copyLink: boolean;
	mainLink: string;
	linkRemover: string;
	hardBreak: boolean;
	logNotice: boolean;
	convertDataview: boolean;
	useFrontmatterTitle: boolean;
	censorText: TextCleaner[];
	inlineTags: boolean;
	dataviewFields: string[];
	frontmatterTitleKey: string;
	excludeDataviewValue: string[];
	metadataFileFields: string[];
	shareExternalModified: boolean;
	automaticallyMergePR: boolean;
	metadataExtractorPath: string;
	convertInternalNonShared: boolean;
	frontmatterTitleRegex: string;
	frontmatterTitleReplacement: string;
}

/**
 * Allow to set a value for the folder settings
 * @enum folderSettings
 */
export enum folderSettings {
	yaml = "yaml",
	obsidian = "obsidian",
	fixed = "fixed",
}

/**
 * Default settings of the plugins
 * @type {{downloadedFolder: folderSettings.fixed, autoCleanUpExcluded: any[], subFolder: string, embedImage: boolean, dataviewFields: any[], githubName: string, useFrontmatterTitle: boolean, convertDataview: boolean, githubRepo: string, editorMenu: boolean, frontmatterTitleKey: string, metadataFileFields: any[], yamlFolderKey: string, folderDefaultName: string, copyLink: boolean, metadataExtractorPath: string, excludeDataviewValue: any[], GhToken: string, githubBranch: string, fileMenu: boolean, convertWikiLinks: boolean, embedNotes: boolean, folderNote: boolean, rootFolder: string, defaultImageFolder: string, mainLink: string, shareKey: string, workflowName: string, shareExternalModified: boolean, convertForGithub: boolean, autoCleanUp: boolean, inlineTags: boolean, logNotice: boolean, excludedFolder: any[], hardBreak: boolean, automaticallyMergePR: boolean, linkRemover: string, censorText: any[]}}
 */
export const DEFAULT_SETTINGS: GitHubPublisherSettings = {
	githubRepo: "",
	githubName: "",
	GhToken: "",
	githubBranch: "main",
	shareKey: "share",
	excludedFolder: [],
	fileMenu: false,
	editorMenu: false,
	downloadedFolder: folderSettings.fixed,
	//fixedFolder
	//yamlFrontmatter
	//obsidianPath
	folderDefaultName: "",
	yamlFolderKey: "",
	rootFolder: "",
	workflowName: "",
	embedImage: true,
	defaultImageFolder: "",
	autoCleanUp: false,
	autoCleanUpExcluded: [],
	folderNote: false,
	convertWikiLinks: false,
	convertForGithub: false,
	subFolder: "",
	embedNotes: false,
	copyLink: false,
	mainLink: "",
	linkRemover: "",
	hardBreak: false,
	logNotice: false,
	convertDataview: true,
	useFrontmatterTitle: false,
	censorText: [],
	inlineTags: false,
	dataviewFields: [],
	excludeDataviewValue: [],
	metadataFileFields: [],
	frontmatterTitleKey: "title",
	shareExternalModified: false,
	automaticallyMergePR: true,
	metadataExtractorPath: "",
	convertInternalNonShared: false,
	frontmatterTitleRegex: "",
	frontmatterTitleReplacement: "",
};

export interface MetadataExtractor {
	allExceptMdFile: string | null;
	metadataFile: string | null;
	tagsFile: string | null;
}

export interface LinkedNotes {
	linked: TFile;
	linkFrom: string;
	altText: string;
	destinationFilePath?: string;
}

export interface ConvertedLink {
	converted: string;
	real: string;
	repoFrontmatter?: RepoFrontmatter | RepoFrontmatter[];
}

export interface GithubRepo {
	file: string;
	sha: string;
}

export interface TextCleaner {
	entry: string;
	replace: string;
	after: boolean;
	flags: string;
}

export const PUBLISHER_TABS = {
	"github-configuration": {
		name: settings("github", "githubConfiguration") as string,
		icon: "cloud",
	},
	"upload-configuration": {
		name: "Upload Configuration",
		icon: "upload",
	},
	"text-conversion": {
		name: settings("textConversion", "textConversion") as string,
		icon: "file-text",
	},
	"embed-configuration": {
		name: settings("embed", "embed") as string,
		icon: "link",
	},
	"plugin-settings": {
		name: settings("plugin", "pluginSettings") as string,
		icon: "gear",
	},
	help: {
		name: subSettings("help.help") as string,
		icon: "info",
	},
};

export interface FrontmatterConvert {
	links: boolean;
	attachment: boolean;
	embed: boolean;
	attachmentLinks: string;
	convertWiki: boolean;
	removeEmbed: boolean;
	dataview: boolean;
	hardbreak: boolean;
	convertInternalNonShared: boolean;
	convertInternalLinks: boolean;
}

export interface RepoFrontmatter {
	branch: string;
	repo: string;
	owner: string;
	autoclean: boolean;
}
